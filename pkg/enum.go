package pkg

import "errors"

type Esp3PacketType uint8

const (
	PACKET_TYPE_RADIO_ERP1         Esp3PacketType = 0x01
	PACKET_TYPE_RESPONSE           Esp3PacketType = 0x02
	PACKET_TYPE_RADIO_SUB_TEL      Esp3PacketType = 0x03
	PACKET_TYPE_EVENT              Esp3PacketType = 0x04
	PACKET_TYPE_COMMON_COMMAND     Esp3PacketType = 0x05
	PACKET_TYPE_SMART_ACK_COMMAND  Esp3PacketType = 0x06
	PACKET_TYPE_REMOTE_MAN_COMMAND Esp3PacketType = 0x07
	PACKET_TYPE_RADIO_MESSAGE      Esp3PacketType = 0x09
	PACKET_TYPE_RADIO_ERP2         Esp3PacketType = 0x0a
	PACKET_TYPE_CONFIG_COMMAND     Esp3PacketType = 0x0b
	PACKET_TYPE_COMMAND_ACCEPTED   Esp3PacketType = 0x0c
	PACKET_TYPE_RADIO_802_15_4     Esp3PacketType = 0x10
	PACKET_TYPE_COMMAND_2_4        Esp3PacketType = 0x11
)

func ParseEsp3PacketFromByte(byte uint8) (Esp3PacketType, error) {
	switch byte {
	case 0x01:
		return PACKET_TYPE_RADIO_ERP1, nil
	case 0x02:
		return PACKET_TYPE_RESPONSE, nil
	case 0x03:
		return PACKET_TYPE_RADIO_SUB_TEL, nil
	case 0x04:
		return PACKET_TYPE_EVENT, nil
	case 0x05:
		return PACKET_TYPE_COMMON_COMMAND, nil
	case 0x06:
		return PACKET_TYPE_SMART_ACK_COMMAND, nil
	case 0x07:
		return PACKET_TYPE_REMOTE_MAN_COMMAND, nil
	case 0x09:
		return PACKET_TYPE_RADIO_MESSAGE, nil
	case 0x0a:
		return PACKET_TYPE_RADIO_ERP2, nil
	case 0x0b:
		return PACKET_TYPE_CONFIG_COMMAND, nil
	case 0x0c:
		return PACKET_TYPE_COMMAND_ACCEPTED, nil
	case 0x10:
		return PACKET_TYPE_RADIO_802_15_4, nil
	case 0x11:
		return PACKET_TYPE_COMMAND_2_4, nil
	default:
		return 0, errors.New("invalid packet type")
	}
}

func (packetType Esp3PacketType) String() string {
	switch packetType {
	case PACKET_TYPE_RADIO_ERP1:
		return "PACKET_TYPE_RADIO_ERP1"
	case PACKET_TYPE_RESPONSE:
		return "PACKET_TYPE_RESPONSE"
	case PACKET_TYPE_RADIO_SUB_TEL:
		return "PACKET_TYPE_RADIO_SUB_TEL"
	case PACKET_TYPE_EVENT:
		return "PACKET_TYPE_EVENT"
	case PACKET_TYPE_COMMON_COMMAND:
		return "PACKET_TYPE_COMMON_COMMAND"
	case PACKET_TYPE_SMART_ACK_COMMAND:
		return "PACKET_TYPE_SMART_ACK_COMMAND"
	case PACKET_TYPE_REMOTE_MAN_COMMAND:
		return "PACKET_TYPE_REMOTE_MAN_COMMAND"
	case PACKET_TYPE_RADIO_MESSAGE:
		return "PACKET_TYPE_RADIO_MESSAGE"
	case PACKET_TYPE_RADIO_ERP2:
		return "PACKET_TYPE_RADIO_ERP2"
	case PACKET_TYPE_CONFIG_COMMAND:
		return "PACKET_TYPE_CONFIG_COMMAND"
	case PACKET_TYPE_COMMAND_ACCEPTED:
		return "PACKET_TYPE_COMMAND_ACCEPTED"
	case PACKET_TYPE_RADIO_802_15_4:
		return "PACKET_TYPE_RADIO_802_15_4"
	case PACKET_TYPE_COMMAND_2_4:
		return "PACKET_TYPE_COMMAND_2_4"
	default:
		return "UNKNOWN"
	}
}

type Rorg uint8

const (
	RORG_RPS        Rorg = 0xf6
	RORG_1BS        Rorg = 0xd5
	RORG_4BS        Rorg = 0xa5
	RORG_VLD        Rorg = 0xd2
	RORG_MSC        Rorg = 0xd1
	RORG_ADT        Rorg = 0xa6
	RORG_SM_LRN_REQ Rorg = 0xc6
	RORG_SM_LRN_ANS Rorg = 0xc7
	RORG_SM_REC     Rorg = 0xa7
	RORG_SYS_EX     Rorg = 0xc5
	RORG_SEC        Rorg = 0x30
	RORG_SEC_ENCAPS Rorg = 0x31
	RORG_SEC_MAN    Rorg = 0x34
	RORG_SIGNAL     Rorg = 0xd0
	RORG_UTE        Rorg = 0xd4
)

func (rorg Rorg) String() string {
	switch rorg {
	case RORG_RPS:
		return "RORG_RPS"
	case RORG_1BS:
		return "RORG_1BS"
	case RORG_4BS:
		return "RORG_4BS"
	case RORG_VLD:
		return "RORG_VLD"
	case RORG_MSC:
		return "RORG_MSC"
	case RORG_ADT:
		return "RORG_ADT"
	case RORG_SM_LRN_REQ:
		return "RORG_SM_LRN_REQ"
	case RORG_SM_LRN_ANS:
		return "RORG_SM_LRN_ANS"
	case RORG_SM_REC:
		return "RORG_SM_REC"
	case RORG_SYS_EX:
		return "RORG_SYS_EX"
	case RORG_SEC:
		return "RORG_SEC"
	case RORG_SEC_ENCAPS:
		return "RORG_SEC_ENCAPS"
	case RORG_SEC_MAN:
		return "RORG_SEC_MAN"
	case RORG_SIGNAL:
		return "RORG_SIGNAL"
	case RORG_UTE:
		return "RORG_UTE"
	default:
		return "UNKNOWN"
	}
}

type ResponseReturnCode uint8

const (
	RESPONSE_OK               ResponseReturnCode = 0x00
	RESPONSE_ERROR            ResponseReturnCode = 0x01
	RESPONSE_NOT_SUPPORTED    ResponseReturnCode = 0x02
	RESPONSE_WRONG_PARAM      ResponseReturnCode = 0x03
	RESPONSE_OPERATION_DENIED ResponseReturnCode = 0x04
	RESPONSE_LOCK_SET         ResponseReturnCode = 0x05
	RESPONSE_BUFFER_TO_SMALL  ResponseReturnCode = 0x06
	RESPONSE_NO_FREE_BUFFER   ResponseReturnCode = 0x07
)

func (returnCode ResponseReturnCode) String() string {
	switch returnCode {
	case RESPONSE_OK:
		return "RESPONSE_OK"
	case RESPONSE_ERROR:
		return "RESPONSE_ERROR"
	case RESPONSE_NOT_SUPPORTED:
		return "RESPONSE_NOT_SUPPORTED"
	case RESPONSE_WRONG_PARAM:
		return "RESPONSE_WRONG_PARAM"
	case RESPONSE_OPERATION_DENIED:
		return "RESPONSE_OPERATION_DENIED"
	case RESPONSE_LOCK_SET:
		return "RESPONSE_LOCK_SET"
	case RESPONSE_BUFFER_TO_SMALL:
		return "RESPONSE_BUFFER_TO_SMALL"
	case RESPONSE_NO_FREE_BUFFER:
		return "RESPONSE_NO_FREE_BUFFER"
	default:
		return "UNKNOWN"
	}
}

type EventCode uint8

const (
	EVENT_CODE_SA_RECLAIM_NOT_SUCCESSFUL EventCode = 0x01
	EVENT_CODE_SA_CONFIRM_LEARN          EventCode = 0x02
	EVENT_CODE_SA_LEARN_ACK              EventCode = 0x03
	EVENT_CODE_CO_READY                  EventCode = 0x04
	EVENT_CODE_CO_EVENT_SECUREDEVICES    EventCode = 0x05
	EVENT_CODE_CO_DUTYCYCLE_LIMIT        EventCode = 0x06
	EVENT_CODE_CO_TRANSMIT_FAILED        EventCode = 0x07
	EVENT_CODE_CO_TX_DONE                EventCode = 0x08
	EVENT_CODE_CO_LRN_MODE_DISABLED      EventCode = 0x09
)

func (eventCode EventCode) String() string {
	switch eventCode {
	case EVENT_CODE_SA_RECLAIM_NOT_SUCCESSFUL:
		return "EVENT_CODE_SA_RECLAIM_NOT_SUCCESSFUL"
	case EVENT_CODE_SA_CONFIRM_LEARN:
		return "EVENT_CODE_SA_CONFIRM_LEARN"
	case EVENT_CODE_SA_LEARN_ACK:
		return "EVENT_CODE_SA_LEARN_ACK"
	case EVENT_CODE_CO_READY:
		return "EVENT_CODE_CO_READY"
	case EVENT_CODE_CO_EVENT_SECUREDEVICES:
		return "EVENT_CODE_CO_EVENT_SECUREDEVICES"
	case EVENT_CODE_CO_DUTYCYCLE_LIMIT:
		return "EVENT_CODE_CO_DUTYCYCLE_LIMIT"
	case EVENT_CODE_CO_TRANSMIT_FAILED:
		return "EVENT_CODE_CO_TRANSMIT_FAILED"
	case EVENT_CODE_CO_TX_DONE:
		return "EVENT_CODE_CO_TX_DONE"
	case EVENT_CODE_CO_LRN_MODE_DISABLED:
		return "EVENT_CODE_CO_LRN_MODE_DISABLED"
	default:
		return "UNKNOWN"
	}
}

type CommonCommand uint8

const (
	COMMON_COMMAND_WR_SLEEP                       CommonCommand = 0x01
	COMMON_COMMAND_WR_RESET                       CommonCommand = 0x02
	COMMON_COMMAND_RD_VERSION                     CommonCommand = 0x03
	COMMON_COMMAND_RD_SYS_LOG                     CommonCommand = 0x04
	COMMON_COMMAND_WR_SYS_LOG                     CommonCommand = 0x05
	COMMON_COMMAND_WR_BIST                        CommonCommand = 0x06
	COMMON_COMMAND_WR_IDBASE                      CommonCommand = 0x07
	COMMON_COMMAND_RD_IDBASE                      CommonCommand = 0x08
	COMMON_COMMAND_WR_REPEATER                    CommonCommand = 0x09
	COMMON_COMMAND_RD_REPEATER                    CommonCommand = 0x0a
	COMMON_COMMAND_WR_FILTER_ADD                  CommonCommand = 0x0b
	COMMON_COMMAND_WR_FILTER_DEL                  CommonCommand = 0x0c
	COMMON_COMMAND_WR_FILTER_DEL_ALL              CommonCommand = 0x0d
	COMMON_COMMAND_WR_FILTER_ENABLE               CommonCommand = 0x0e
	COMMON_COMMAND_RD_FILTER                      CommonCommand = 0x0f
	COMMON_COMMAND_WR_WAIT_MATURITY               CommonCommand = 0x10
	COMMON_COMMAND_WR_SUBTEL                      CommonCommand = 0x11
	COMMON_COMMAND_WR_MEM                         CommonCommand = 0x12
	COMMON_COMMAND_RD_MEM                         CommonCommand = 0x13
	COMMON_COMMAND_RD_MEM_ADDRESS                 CommonCommand = 0x14
	COMMON_COMMAND_RD_SECURITY                    CommonCommand = 0x15
	COMMON_COMMAND_WR_SECURITY                    CommonCommand = 0x16
	COMMON_COMMAND_WR_LEARNMODE                   CommonCommand = 0x17
	COMMON_COMMAND_RD_LEARNMODE                   CommonCommand = 0x18
	COMMON_COMMAND_WR_SECUREDEVICE_ADD            CommonCommand = 0x19
	COMMON_COMMAND_WR_SECUREDEVICE_DEL            CommonCommand = 0x1a
	COMMON_COMMAND_RD_SECUREDEVICE_BY_INDEX       CommonCommand = 0x1b
	COMMON_COMMAND_WR_MODE                        CommonCommand = 0x1c
	COMMON_COMMAND_RD_NUMSECUREDEVICES            CommonCommand = 0x1d
	COMMON_COMMAND_RD_SECUREDEVICE_BY_ID          CommonCommand = 0x1e
	COMMON_COMMAND_WR_SECUREDEVICE_ADD_PSK        CommonCommand = 0x1f
	COMMON_COMMAND_WR_SECUREDEVICE_SENDTEACHIN    CommonCommand = 0x20
	COMMON_COMMAND_WR_TEMPORARY_RLC_WINDOW        CommonCommand = 0x21
	COMMON_COMMAND_RD_SECUREDEVICE_PSK            CommonCommand = 0x22
	COMMON_COMMAND_RD_DUTYCYCLE_LIMIT             CommonCommand = 0x23
	COMMON_COMMAND_SET_BAUDRATE                   CommonCommand = 0x24
	COMMON_COMMAND_GET_FREQUENCY_INFO             CommonCommand = 0x25
	COMMON_COMMAND_GET_STEPCODE                   CommonCommand = 0x27
	COMMON_COMMAND_WR_REMAN_CODE                  CommonCommand = 0x2e
	COMMON_COMMAND_WR_STARTUP_DELAY               CommonCommand = 0x2f
	COMMON_COMMAND_WR_REMAN_REPEATING             CommonCommand = 0x30
	COMMON_COMMAND_RD_REMAN_REPEATING             CommonCommand = 0x31
	COMMON_COMMAND_SET_NOISETHRESHOLD             CommonCommand = 0x32
	COMMON_COMMAND_GET_NOISETHRESHOLD             CommonCommand = 0x33
	COMMON_COMMAND_WR_RLC_SAVE_PERIOD             CommonCommand = 0x36
	COMMON_COMMAND_WR_RLC_LEGACY_MODE             CommonCommand = 0x37
	COMMON_COMMAND_WR_SECUREDEVICEV2_ADD          CommonCommand = 0x38
	COMMON_COMMAND_RD_SECUREDEVICEV2_BY_INDEX     CommonCommand = 0x39
	COMMON_COMMAND_WR_RSSITEST_MODE               CommonCommand = 0x3a
	COMMON_COMMAND_RD_RSSITEST_MODE               CommonCommand = 0x3b
	COMMON_COMMAND_WR_SECUREDEVICE_MAINTENANCEKEY CommonCommand = 0x3c
	COMMON_COMMAND_RD_SECUREDEVICE_MAINTENANCEKEY CommonCommand = 0x3d
	COMMON_COMMAND_WR_TRANSPARENT_MODE            CommonCommand = 0x3e
	COMMON_COMMAND_RD_TRANSPARENT_MODE            CommonCommand = 0x3f
	COMMON_COMMAND_WR_TX_ONLY_MODE                CommonCommand = 0x40
	COMMON_COMMAND_RD_TX_ONLY_MODE                CommonCommand = 0x41
)

func (command CommonCommand) String() string {
	switch command {
	case COMMON_COMMAND_WR_SLEEP:
		return "COMMON_COMMAND_WR_SLEEP"
	case COMMON_COMMAND_WR_RESET:
		return "COMMON_COMMAND_WR_RESET"
	case COMMON_COMMAND_RD_VERSION:
		return "COMMON_COMMAND_RD_VERSION"
	case COMMON_COMMAND_RD_SYS_LOG:
		return "COMMON_COMMAND_RD_SYS_LOG"
	case COMMON_COMMAND_WR_SYS_LOG:
		return "COMMON_COMMAND_WR_SYS_LOG"
	case COMMON_COMMAND_WR_BIST:
		return "COMMON_COMMAND_WR_BIST"
	case COMMON_COMMAND_WR_IDBASE:
		return "COMMON_COMMAND_WR_IDBASE"
	case COMMON_COMMAND_RD_IDBASE:
		return "COMMON_COMMAND_RD_IDBASE"
	case COMMON_COMMAND_WR_REPEATER:
		return "COMMON_COMMAND_WR_REPEATER"
	case COMMON_COMMAND_RD_REPEATER:
		return "COMMON_COMMAND_RD_REPEATER"
	case COMMON_COMMAND_WR_FILTER_ADD:
		return "COMMON_COMMAND_WR_FILTER_ADD"
	case COMMON_COMMAND_WR_FILTER_DEL:
		return "COMMON_COMMAND_WR_FILTER_DEL"
	case COMMON_COMMAND_WR_FILTER_DEL_ALL:
		return "COMMON_COMMAND_WR_FILTER_DEL_ALL"
	case COMMON_COMMAND_WR_FILTER_ENABLE:
		return "COMMON_COMMAND_WR_FILTER_ENABLE"
	case COMMON_COMMAND_RD_FILTER:
		return "COMMON_COMMAND_RD_FILTER"
	case COMMON_COMMAND_WR_WAIT_MATURITY:
		return "COMMON_COMMAND_WR_WAIT_MATURITY"
	case COMMON_COMMAND_WR_SUBTEL:
		return "COMMON_COMMAND_WR_SUBTEL"
	case COMMON_COMMAND_WR_MEM:
		return "COMMON_COMMAND_WR_MEM"
	case COMMON_COMMAND_RD_MEM:
		return "COMMON_COMMAND_RD_MEM"
	case COMMON_COMMAND_RD_MEM_ADDRESS:
		return "COMMON_COMMAND_RD_MEM_ADDRESS"
	case COMMON_COMMAND_RD_SECURITY:
		return "COMMON_COMMAND_RD_SECURITY"
	case COMMON_COMMAND_WR_SECURITY:
		return "COMMON_COMMAND_WR_SECURITY"
	case COMMON_COMMAND_WR_LEARNMODE:
		return "COMMON_COMMAND_WR_LEARNMODE"
	case COMMON_COMMAND_RD_LEARNMODE:
		return "COMMON_COMMAND_RD_LEARNMODE"
	case COMMON_COMMAND_WR_SECUREDEVICE_ADD:
		return "COMMON_COMMAND_WR_SECUREDEVICE_ADD"
	case COMMON_COMMAND_WR_SECUREDEVICE_DEL:
		return "COMMON_COMMAND_WR_SECUREDEVICE_DEL"
	case COMMON_COMMAND_RD_SECUREDEVICE_BY_INDEX:
		return "COMMON_COMMAND_RD_SECUREDEVICE_BY_INDEX"
	case COMMON_COMMAND_WR_MODE:
		return "COMMON_COMMAND_WR_MODE"
	case COMMON_COMMAND_RD_NUMSECUREDEVICES:
		return "COMMON_COMMAND_RD_NUMSECUREDEVICES"
	case COMMON_COMMAND_RD_SECUREDEVICE_BY_ID:
		return "COMMON_COMMAND_RD_SECUREDEVICE_BY_ID"
	case COMMON_COMMAND_WR_SECUREDEVICE_ADD_PSK:
		return "COMMON_COMMAND_WR_SECUREDEVICE_ADD_PSK"
	case COMMON_COMMAND_WR_SECUREDEVICE_SENDTEACHIN:
		return "COMMON_COMMAND_WR_SECUREDEVICE_SENDTEACHIN"
	case COMMON_COMMAND_WR_TEMPORARY_RLC_WINDOW:
		return "COMMON_COMMAND_WR_TEMPORARY_RLC_WINDOW"
	case COMMON_COMMAND_RD_SECUREDEVICE_PSK:
		return "COMMON_COMMAND_RD_SECUREDEVICE_PSK"
	case COMMON_COMMAND_RD_DUTYCYCLE_LIMIT:
		return "COMMON_COMMAND_RD_DUTYCYCLE_LIMIT"
	case COMMON_COMMAND_SET_BAUDRATE:
		return "COMMON_COMMAND_SET_BAUDRATE"
	case COMMON_COMMAND_GET_FREQUENCY_INFO:
		return "COMMON_COMMAND_GET_FREQUENCY_INFO"
	case COMMON_COMMAND_GET_STEPCODE:
		return "COMMON_COMMAND_GET_STEPCODE"
	case COMMON_COMMAND_WR_REMAN_CODE:
		return "COMMON_COMMAND_WR_REMAN_CODE"
	case COMMON_COMMAND_WR_STARTUP_DELAY:
		return "COMMON_COMMAND_WR_STARTUP_DELAY"
	case COMMON_COMMAND_WR_REMAN_REPEATING:
		return "COMMON_COMMAND_WR_REMAN_REPEATING"
	case COMMON_COMMAND_RD_REMAN_REPEATING:
		return "COMMON_COMMAND_RD_REMAN_REPEATING"
	case COMMON_COMMAND_SET_NOISETHRESHOLD:
		return "COMMON_COMMAND_SET_NOISETHRESHOLD"
	case COMMON_COMMAND_GET_NOISETHRESHOLD:
		return "COMMON_COMMAND_GET_NOISETHRESHOLD"
	case COMMON_COMMAND_WR_RLC_SAVE_PERIOD:
		return "COMMON_COMMAND_WR_RLC_SAVE_PERIOD"
	case COMMON_COMMAND_WR_RLC_LEGACY_MODE:
		return "COMMON_COMMAND_WR_RLC_LEGACY_MODE"
	case COMMON_COMMAND_WR_SECUREDEVICEV2_ADD:
		return "COMMON_COMMAND_WR_SECUREDEVICEV2_ADD"
	case COMMON_COMMAND_RD_SECUREDEVICEV2_BY_INDEX:
		return "COMMON_COMMAND_RD_SECUREDEVICEV2_BY_INDEX"
	case COMMON_COMMAND_WR_RSSITEST_MODE:
		return "COMMON_COMMAND_WR_RSSITEST_MODE"
	case COMMON_COMMAND_RD_RSSITEST_MODE:
		return "COMMON_COMMAND_RD_RSSITEST_MODE"
	case COMMON_COMMAND_WR_SECUREDEVICE_MAINTENANCEKEY:
		return "COMMON_COMMAND_WR_SECUREDEVICE_MAINTENANCEKEY"
	case COMMON_COMMAND_RD_SECUREDEVICE_MAINTENANCEKEY:
		return "COMMON_COMMAND_RD_SECUREDEVICE_MAINTENANCEKEY"
	case COMMON_COMMAND_WR_TRANSPARENT_MODE:
		return "COMMON_COMMAND_WR_TRANSPARENT_MODE"
	case COMMON_COMMAND_RD_TRANSPARENT_MODE:
		return "COMMON_COMMAND_RD_TRANSPARENT_MODE"
	case COMMON_COMMAND_WR_TX_ONLY_MODE:
		return "COMMON_COMMAND_WR_TX_ONLY_MODE"
	case COMMON_COMMAND_RD_TX_ONLY_MODE:
		return "COMMON_COMMAND_RD_TX_ONLY_MODE"
	default:
		return "UNKNOWN"
	}
}
